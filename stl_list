#include <iostream>
#include <iterator>
//using namespace std;

template<typename T>
struct __list_node{
    typedef void* void_pointer;
    void_pointer prev;
    void_pointer next;
    T data;
};

template<class T,class Ref = T&,class Ptr=T*>
struct __list_iterator {
    typedef __list_iterator<T,T&,T*> iterator;
    typedef __list_iterator<T,Ref,Ptr> self; 
    typedef std::bidirectional_iterator_tag iterator_category;
    typedef T value_type;
    typedef Ptr pointer;
    typedef Ref reference;
    typedef __list_node<T>* link_type;
    typedef size_t size_type;
    typedef std::ptrdiff_t difference_type;

    link_type node;

    //constructor
    __list_iterator(link_type x):node(x){}
    __list_iterator(){}
    __list_iterator(const iterator& x):node(x.node){}

    bool operator==(const self& x)const {return node==x.node;}
    bool operator!=(const self& x)const {return node!=x.node;}
    reference operator*() const {return (*node).data;}
    pointer operator->() const {return &(operator*());}

    self& operator++(){
        node = (link_type)((*node).next);
        return *this;
    }
    self operator++(int){
        self tmp = *this;
        ++*this;
        return tmp;
    }
    self& operator--(){
        node = (link_type)((*node).prev);
        return *this;
    }
    self operator--(int){
        self tmp = *this;
        --*this;
        return tmp;
    }
};

template <class T,class Alloc>
class list {
protected:
    typedef __list_node<T> list_node;
public:
    typedef list_node* link_type;
    typedef typename __list_iterator<T>::iterator iterator; 
    typedef typename __list_iterator<T>::reference reference; 
    typedef size_t  size_type;
protected:
    link_type node;
    iterator begin() {return (link_type)((*node).next);}
    iterator end(){return node;}
    bool empty() const {return node->next == node;}
    size_type size() const {
        size_type result = 0;
        distance(begin(),end(),result);
        return result;
    }
    reference front() {return *begin();}
    reference back() {return *(--end());}

};

int main()
{
    std::cout << "ad" << std::endl;
    return 0;
}
