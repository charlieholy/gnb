#include <iostream>
using namespace std;

template<bool test>
class Mock
{
public:
  template<typename T>
  using on_prod = std::enable_if_t<test,T>;

  template<typename T>
  using on_test = std::enable_if_t<!test,T>;

};

using tMock = Mock<false>;
template<typename T = void>
tMock::on_prod<T> foo(){
  cout << "on prod..." << endl;
}

template<typename T = void>
tMock::on_test<T> foo(){
  cout << "on test..." << endl;
}


int main()
{
  foo();
  cout <<  "asd" << endl;
  return 0;
}

///////////////////
template<typename T>
void fun(const typename std::enable_if_t<std::is_integral<T>::value, T>& val) {
    std::cout << "fun<int>";
}

template<typename T>
void fun(const typename std::enable_if_t<std::is_floating_point<T>::value, T>& val) {
    std::cout << "fun<float>";
}

int main()
{
    fun(4);
    fun(4.4);
}
////////////////////////////////
/* RIGHT */
 
struct T {
    enum { int_t, float_t } type;
    template <typename Integer,
              std::enable_if_t<std::is_integral<Integer>::value, bool> = true               /// 模板的参数true = true????
    >
    T(Integer) : type(int_t) {}
 
    template <typename Floating,
              std::enable_if_t<std::is_floating_point<Floating>::value, bool> = true
    >
    T(Floating) : type(float_t) {} // OK
};
