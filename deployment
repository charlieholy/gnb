#include <iostream>
using namespace std;

template <class...>
class Core;

template<int id>
class Core<array<int,id>>
{
public:
	Core()
	{
	  cout << "core" << endl;
	}

};

template<class... Ids>
struct Dep
{
   static void apply()
   {
      cout << "apply" << endl;
      Core<array<int,2>> core;
   } 
};

int main()
{
  cout << "main" << endl;
  
  Dep<int>::apply();

  return 0;
}

//////////////////////////
#include <iostream>
using namespace std;

template<int t>
class A{};

template <class...>
class Core;

template<int id>
class Core<A<id>>
{
public:
	Core()
	{
	  cout << "core:" << id << endl;
	}

};

template<class... Ids>
struct Dep
{
   static void apply()
   {
      cout << "apply" << endl;
      auto cores = make_tuple(Core<Ids>()...);
   } 
};

int main()
{
  cout << "main" << endl;
  Dep<A<2>,A<3>>::apply();
  return 0;
}

