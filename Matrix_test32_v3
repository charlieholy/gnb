#include <iostream>
#include <ctime>
#include <stdint.h>
#include <iostream>
#include <string>
#include <sys/time.h>
#include <array>
#include <stdio.h>
using namespace std;

static inline int64_t getTimeNs()
{
    struct timespec ts;
    clock_gettime(CLOCK_REALTIME, &ts);
    return ts.tv_sec*1000000000 + ts.tv_nsec;
}

constexpr int POW2_15 = 1<<15;
#define Q15_REAL(Q15) (Q15>>16&0xffff)
#define Q15_IMAG(Q15) (Q15&0xffff)
#define Q15_UNSIGNED_FLOAT(Q15) ((float)(Q15&0x7fff)/POW2_15)
#define Q15_FLOAT(Q15) ((Q15>>15)?-Q15_UNSIGNED_FLOAT(Q15):Q15_UNSIGNED_FLOAT(Q15))
#define Q15_FLOAT_R(Q15) (Q15_FLOAT(Q15_REAL(Q15)))
#define Q15_FLOAT_I(Q15) (Q15_FLOAT(Q15_IMAG(Q15)))

#define Q15_SIGN(FLOAT) (FLOAT<0?POW2_15:0)
#define FLOAT_Q15_UNSIGNED(FLOAT) ((int)abs(FLOAT*POW2_15))
#define FLOAT_Q15(FLOAT) (FLOAT_Q15_UNSIGNED(FLOAT)+Q15_SIGN(FLOAT))

template<typename T=float>
using mycomplex = array<T,2>;

template <int M = 0 /*row*/, int N = 0 /*col*/>
using Matrix = array<array<mycomplex<>, N>, M>;

constexpr int ELEM_LEN = 32;
constexpr int ELEM_LEN_8 = 8;
constexpr int ELEM_LEN_4 = 4;

#define MULTI(ERES,E1,E2)  do{ERES[0]=E1[0]*E2[0]-E1[1]*E2[1];ERES[1]=E1[1]*E2[0]+E1[0]*E2[1];}while(0)
#define MATRIX_DOT(MRES,M1,M2,II,JJ,KK) do{ \
   for (int i = 0; i < II; i++) \
   { \
       for (int j = 0; j < JJ; j++) \
       { \
           for (int k = 0; k < KK; k++) \
           { \
                MRES[i][j][0] +=  (M1[i][k][0]*M2[k][j][0] - M1[i][k][1]*M2[k][j][1]); \
                MRES[i][j][1] +=  (M1[i][k][1]*M2[k][j][0] + M1[i][k][0]*M2[k][j][1]); \
           } \
       } \
   } \
}while(0)
#define MATRIX_AVG(MRES,M1,M2,II,JJ) do{ \
   for (int i = 0; i < II; i++) \
   { \
       for (int j = 0; j < JJ; j++) \
       { \
            MRES[i][j][0] =  ((M1[i][j][0]+M2[i][j][0])/2);  \
            MRES[i][j][1] =  ((M1[i][j][1]+M2[i][j][1])/2);  \
       } \
   } \
}while(0)
#define DUMP_OUT(NOTICE,NS,MRES) do{cout << NOTICE <<": cost: " << NS << "ns  [" <<  MRES[0][0][0] << " " << MRES[0][0][1] << "]" << endl;}while(0)


int main()
{
    float random = (float)(getTimeNs()%10);
    float num71 = 0.7071 + random;
    random = (float)(getTimeNs()%10);
    float num72 = 0.7072 + random;
    random = (float)(getTimeNs()%10);
    float num73 = 0.7073 + random;
    random = (float)(getTimeNs()%10);
    float num74 = 0.7074 + random;

    // 1.	32x32 matrix 
    //      (1x32) * (32x32) *(32x1) loop 32 times
    {
        Matrix<1, ELEM_LEN> m1;
        Matrix<ELEM_LEN, ELEM_LEN> m2;
        Matrix<ELEM_LEN,1> m3;
        for(auto i=0;i<ELEM_LEN;i++)
        {
            m1[0][i] = {num71,num72};
            m3[i][0] = {num73,num74};
            for(auto j=0;j<ELEM_LEN;j++)
            {
                m2[i][j] = {num72,num73};
            }
        }

        //calc  (1x32) * (32x32) *(32x1) loop 1 times
        {
            Matrix<1, ELEM_LEN> m12 = {};
            Matrix<1, 1> m23 = {};
            auto B = getTimeNs();
            MATRIX_DOT(m12,m1,m2,1,ELEM_LEN,ELEM_LEN);
            MATRIX_DOT(m23,m12,m3,1,1,ELEM_LEN);
            auto A = getTimeNs();
            DUMP_OUT("(1x32) * (32x32) *(32x1) loop 1 times",A-B,m23);
        }
        //calc  (1x32) * (32x32) *(32x1) loop 32 times
        {
            Matrix<1, ELEM_LEN> m12 = {};
            Matrix<1, 1> m23 = {};
            auto B = getTimeNs();
            for(int i=0;i<ELEM_LEN;i++)
            {
                MATRIX_DOT(m12,m1,m2,1,ELEM_LEN,ELEM_LEN);
                MATRIX_DOT(m23,m12,m3,1,1,ELEM_LEN);
            }
            auto A = getTimeNs();
            DUMP_OUT("(1x32) * (32x32) *(32x1) loop 32 times",A-B,m23);
            
        }
    }
    //     2.	DFT beam
    // (1x8) * (8x8) *(8x1) loop 32 times
    // (1x4) * (4x4) *(4x1) loop 8 times
    {
        Matrix<1, ELEM_LEN_8> m1 = {};
        Matrix<ELEM_LEN_8, ELEM_LEN_8> m2 = {};
        Matrix<ELEM_LEN_8,1> m3 = {};
        for(int i=0;i<ELEM_LEN_8;i++)
        {
            m1[0][i] = {num71,num72};
            m3[i][0] = {num73,num74};
            for(int j=0;j<ELEM_LEN_8;j++)
            {
                m2[i][j] = {num72,num73};
            }
        }
        //(1x8) * (8x8) *(8x1) loop 1 times
        {
            Matrix<1, ELEM_LEN_8> m12 = {};
            Matrix<1, 1> m23 = {};
            auto B = getTimeNs();
            MATRIX_DOT(m12,m1,m2,1,ELEM_LEN_8,ELEM_LEN_8);
            MATRIX_DOT(m23,m12,m3,1,1,ELEM_LEN_8);
            auto A = getTimeNs();
            DUMP_OUT("(1x8) * (8x8) *(8x1) loop 1 times",A-B,m23);
        }
        //(1x8) * (8x8) *(8x1) loop 32 times
        {
            Matrix<1, ELEM_LEN_8> m12 = {};
            Matrix<1, 1> m23 = {};
            auto B = getTimeNs();
            for(int i=0;i<ELEM_LEN;i++)
            {
                MATRIX_DOT(m12,m1,m2,1,ELEM_LEN_8,ELEM_LEN_8);
                MATRIX_DOT(m23,m12,m3,1,1,ELEM_LEN_8);
            }
            auto A = getTimeNs();
            DUMP_OUT("(1x8) * (8x8) *(8x1) loop 32 times:",A-B,m23);
        }
    }
    {
        Matrix<1, ELEM_LEN_4> m1 = {};
        Matrix<ELEM_LEN_4, ELEM_LEN_4> m2 = {};
        Matrix<ELEM_LEN_4,1> m3 = {};
        for(int i=0;i<ELEM_LEN_4;i++)
        {
            m1[0][i] = {num71,num72};
            m3[i][0] = {num73,num74};
            for(int j=0;j<ELEM_LEN_4;j++)
            {
                m2[i][j] = {num72,num73};
            }
        }
        //(1x4) * (4x4) *(4x1) loop 1 times
        {
            Matrix<1, ELEM_LEN_4> m12 = {};
            Matrix<1, 1> m23 = {};
            auto B = getTimeNs();
            MATRIX_DOT(m12,m1,m2,1,ELEM_LEN_4,ELEM_LEN_4);
            MATRIX_DOT(m23,m12,m3,1,1,ELEM_LEN_4);
            auto A = getTimeNs();
            DUMP_OUT("(1x4) * (4x4) *(4x1) loop 1 times:",A-B,m23);
        }
        //(1x4) * (4x4) *(4x1) loop 8 times
        {
            Matrix<1, ELEM_LEN_4> m12 = {};
            Matrix<1, 1> m23 = {};
            auto B = getTimeNs();
            for(int i=0;i<ELEM_LEN_8;i++)
            {
                MATRIX_DOT(m12,m1,m2,1,ELEM_LEN_4,ELEM_LEN_4);
                MATRIX_DOT(m23,m12,m3,1,1,ELEM_LEN_4);
            }
            auto A = getTimeNs();
            DUMP_OUT("(1x4) * (4x4) *(4x1) loop 8 times:",A-B,m23);
        }
    }
        //     3.	L1 RAW data processing  loop 10 times
    // Int type (8x8) with Q1.0.15 convert to float 8x8, then (8x8)*2^x(-5<=x<=14)  (you can just use x=1 or -1)
    // Int type (4x4) with Q1.0.15 convert to float 4x4, then (4x4)*2^x(-5<=x<=14)
    // NOTE: Q1.0.15 first bit as sign bit, no integer bit, 15 bits represent fractional par
    {
        auto B = getTimeNs();
        int num = 0x5a85a88;
        Matrix<ELEM_LEN_8,ELEM_LEN_8> m1 = {};
        for(int i=0;i<ELEM_LEN_8;i++)
        {
            for(int j=0;j<ELEM_LEN_8;j++)
            {
                m1[i][j][0] = Q15_FLOAT_R(num)*2;
                m1[i][j][1] = Q15_FLOAT_I(num)*2;
            }
        }

        auto A = getTimeNs();
        DUMP_OUT("Int type (8x8) with 1 times Q1.0.15:",A-B,m1);

    }
       {
        auto B = getTimeNs();
        int num = 0x5a85a88+random;
        Matrix<ELEM_LEN_8,ELEM_LEN_8> m1 = {};
        for(int t=0;t<10;t++)
        {
            for(int i=0;i<ELEM_LEN_8;i++)
            {
                for(int j=0;j<ELEM_LEN_8;j++)
                {
                    m1[i][j][0] = Q15_FLOAT_R(num)*2;
                    m1[i][j][1] = Q15_FLOAT_I(num)*2;
                }
            }
        }
        auto A = getTimeNs();
        DUMP_OUT("Int type (8x8) with 10 times Q1.0.15:",A-B,m1);

    }
    {
        auto B = getTimeNs();
        int num = 0x5a85a88;
        Matrix<ELEM_LEN_4,ELEM_LEN_4> m1 = {};
        for(int i=0;i<ELEM_LEN_4;i++)
        {
            for(int j=0;j<ELEM_LEN_4;j++)
            {
                m1[i][j][0] = Q15_FLOAT_R(num)*2;
                m1[i][j][1] = Q15_FLOAT_I(num)*2;
            }
        }

        auto A = getTimeNs();
        DUMP_OUT("Int type (4*4) with 1 times Q1.0.15:",A-B,m1);

    }
    {
        auto B = getTimeNs();
        int num = 0x5a85a88+random;
        Matrix<ELEM_LEN_4,ELEM_LEN_4> m1 = {};
        for(int t =0;t<10;t++)
        {
            for(int i=0;i<ELEM_LEN_4;i++)
            {
                for(int j=0;j<ELEM_LEN_4;j++)
                {
                    m1[i][j][0] = Q15_FLOAT_R(num)*2;
                    m1[i][j][1] = Q15_FLOAT_I(num)*2;
                }
            }
        }
        auto A = getTimeNs();
        DUMP_OUT("Int type (4*4) with 10 times Q1.0.15:",A-B,m1);

    }
    //     4.	Matrix Average  loop 10 times
    // ((8x8)+ (8x8))/2
    // ((4x4)+ (4x4))/2
    {
         // ((8x8)+ (8x8))/2
        Matrix<ELEM_LEN_8, ELEM_LEN_8> m1 = {};
        Matrix<ELEM_LEN_8, ELEM_LEN_8> m2 = {};
        Matrix<ELEM_LEN_8, ELEM_LEN_8> m3 = {};
        for(int i=0;i<ELEM_LEN_8;i++)
        {
            for(int j=0;j<ELEM_LEN_8;j++)
            {
                m1[i][j] = {num72,num73};
                m2[i][j] = {num73,num74};
            }
        }
        {
            auto B = getTimeNs();
            MATRIX_AVG(m3,m1,m2,ELEM_LEN_8,ELEM_LEN_8);
            auto A = getTimeNs();
            DUMP_OUT("((8x8)+ (8x8))/2 1 times:",A-B,m3);
        }
        {
            auto B = getTimeNs();
            for(int i=0;i<10;i++)
            {
                MATRIX_AVG(m3,m1,m2,ELEM_LEN_8,ELEM_LEN_8);
                m1 = m3;
            }
            auto A = getTimeNs();
            DUMP_OUT("((8x8)+ (8x8))/2 10 times:",A-B,m3);
        }
    }
        {
        Matrix<ELEM_LEN_4, ELEM_LEN_4> m1 = {};
        Matrix<ELEM_LEN_4, ELEM_LEN_4> m2 = {};
        Matrix<ELEM_LEN_4, ELEM_LEN_4> m3 = {};
        for(int i=0;i<ELEM_LEN_4;i++)
        {
            for(int j=0;j<ELEM_LEN_4;j++)
            {
                m1[i][j] = {num72,num73};
                m2[i][j] = {num73,num74};
            }
        }
        {
            auto B = getTimeNs();
            MATRIX_AVG(m3,m1,m2,ELEM_LEN_4,ELEM_LEN_4);
            auto A = getTimeNs();
            DUMP_OUT("((4x4)+ (4x4))/2 1 times:",A-B,m3);
        }
        {
            auto B = getTimeNs();
            for(int i=0;i<10;i++)
            {
                MATRIX_AVG(m3,m1,m2,ELEM_LEN_4,ELEM_LEN_4);
                m1 = m3;
            }
            auto A = getTimeNs();
            DUMP_OUT("((4x4)+ (4x4))/2 10 times:",A-B,m3);
        }
    }
    //     5.	Vector multiply vector
    // (1x32) * (32x1) loop 32 times
    {
        Matrix<1, ELEM_LEN> m1 = {};
        Matrix<ELEM_LEN, 1> m2 = {};
        Matrix<1,1> m3 = {};
        auto B = getTimeNs();
        for(auto i=0;i<ELEM_LEN;i++)
        {
            m1[0][i] = {num71,num72};
            m2[i][0] = {num73,num74};
        }
        MATRIX_DOT(m3,m1,m2,1,32,1);
        auto A = getTimeNs();
        DUMP_OUT("(1x32) * (32x1) 1 times:",A-B,m3);

    }
    {
        Matrix<1, ELEM_LEN> m1 = {};
        Matrix<ELEM_LEN, 1> m2 = {};
        Matrix<1,1> m3 = {};
        auto B = getTimeNs();
        for(auto i=0;i<ELEM_LEN;i++)
        {
            m1[0][i] = {num71,num72};
            m2[i][0] = {num73,num74};
        }
        for(int t=0;t<32;t++)
        {
            MATRIX_DOT(m3,m1,m2,1,32,1);
        }
        auto A = getTimeNs();
        DUMP_OUT("(1x32) * (32x1) 32 times:",A-B,m3);

    }


    return 0;
}
