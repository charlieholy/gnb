//xtr1common文件
	// TEMPLATE CLASS enable_if
template<bool _Test, class _Ty = void>//第一个模板参数类型bool,这是一种技术
	struct enable_if
	{	// type is undefined for assumed !_Test
	};
 
template<class _Ty>
	struct enable_if<true, _Ty>//这里用到了偏特化，模板实例化时只有第一个模板那参数是true的才会使用此偏特化版本，此时才有typedef _Ty type
	{	// type is _Ty for _Test
	typedef _Ty type;
	};


demo:
template <typename T>//std::is_trivial<T>::value为true会使用这个函数
typename std::enable_if<std::is_trivial<T>::value>::type SFINAE_test(T value)
{
    std::cout<<"T is trival"<<std::endl;
}
 
template <typename T>//std::is_trivial<T>::value为false会使用这个函数
typename std::enable_if<!std::is_trivial<T>::value>::type SFINAE_test(T value)
{
    std::cout<<"T is none trival"<<std::endl;
}


SFINAE_test(std::string("123"));
SFINAE_test(123);

out:
T is none trival
T is trival
